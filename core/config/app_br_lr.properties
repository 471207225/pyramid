########## IO ###########
# folder for all outputs
output.folder=/huge1/people/chengli/projects/pyramid/archives/app3/ohsumed_20000/1
# the name of the train folder
output.trainFolder=train
# the name of the test folder
output.testFolder=test
# the name of the validation folder
output.validFolder=valid
# the full name of the log file
# if not given, the log will be printed to the console
output.log=

######### functions ##########
# use two queries to specify training set and test set
# the query string should be the string after the top level "query":
# For example, if the curl command is
# curl -XGET "http://localhost:9200/ohsumed_20000/document/_search" -d'{"query":{"filtered":{"query":{"match_all":{}},"filter":{"term":{"split":"train"}}}}}'
# then the query string should be {"filtered":{"query":{"match_all":{}},"filter":{"term":{"split":"train"}}}}
# make sure the curly braces match

# the elasticsearch query string for matching training documents
train.splitQuery={"bool": {"must": {"match_all": {}},"filter": {"term": {"split": "train"}}}}
# the elasticsearch query string for matching test documents
test.splitQuery={"bool": {"must": {"match_all": {}},"filter": {"term": {"split": "test"}}}}
# the elasticsearch query string for matching validation documents
valid.splitQuery={"bool": {"must": {"match_all": {}},"filter": {"term": {"split": "valid"}}}}

# generate training set
createTrainSet=true
# generate test set
createTestSet=true
# generate validation set
createValidSet=true

# train model; produce reports for training set; train should be run prior to test
train=true
# after "train", run "calibrate" to calibrate probabilities
# calibration is necessary if predict.target=subsetAccuracy
calibrate=true
# load model; produce reports for test set
test=true


########## index ########## 
index.indexName=ohsumed_20000
index.clusterName=fijielasticsearch
index.documentType=document
# node or transport
index.clientType=node
# set hosts if clientType=transport
index.hosts=fiji11,fiji12
# set ports if clientType=transport
index.ports=9300,9300



######### feature ########## 
train.feature.useInitialFeatures=true
train.feature.featureFieldPrefix=feature
train.feature.categFeature.filter=true
train.feature.categFeature.percentThreshold=0.1
# if true, ngrams can have repeated words; if false, we only keep ngrams in which all words are distinct
train.feature.ngram.allowDuplicateWords=true
# if true, "a b" cannot match "b a"
train.feature.ngram.inOrder=true
train.feature.ngram.n=1,2
# how frequent an ngram needs to be in order to be considered as a feature
# the minimum fraction of documents containing the ngram; 0.02 means 2 percent
train.feature.ngram.minDf=0.02
train.feature.ngram.slop=0,1
train.feature.ngram.extractionFields=body
# can be es_original, frequency, binary, tfifl
# tfifl = term frequency normalized by field length;
# to use tfifl, users should manually store the field length in a separate field named <field_name>_field_length, e.g., body_field_length
train.feature.ngram.matchScoreType=es_original

# whether to perform feature selection for ngrams
train.feature.ngram.selection=false
# if selection=true, how many ngrams to keep for each label
train.feature.ngram.selectPerLabel=50

train.feature.missingValue=false

# whether to add external ngrams from a file
# if true, user specified ngrams will be added to the feature matrix
train.feature.addExternalNgrams=false
# the file containing user specified ngrams, one ngram per line
# users do not need to manually analyze (tokenize, stem, filter) these ngrams, but need to specify the right analyzer below
train.feature.externalNgramFile=/home/chengli/experiments/pyramid/application/app3/configs/ohsumed_20000/ngramlist

# whether to filter ngram candidates based on a list of unigram keywords 
# if true, only ngrams (n>1) containing at least one of the keywords will be kept
train.feature.filterNgramsByKeyWords=false
# the file containing unigram keywords, one unigram per line
# users do not need to manually analyze (tokenize, stem, filter) these unigrams, but need to specify the right analyzer below
train.feature.filterNgrams.keyWordsFile=/home/chengli/experiments/pyramid/application/app3/configs/ohsumed_20000/keywords

# the program will use this analyzer to analyze (tokenize, stem, filter) the user provided ngrams and unigram keywords
# this analyzer should be the same as the one specified in the Elasticsearch body field mapping
train.feature.analyzer=english

# whether to filter ngram candidates by a regular expression
# if true, ngrams matching the regular expression will be removed
train.feature.filterNgramsByRegex=false

# the regular expression used to filter ngrams
# for example, \\d will remove a unigram if it is a digit
# users can specify ngram length in the regular expression using the number of spaces (an ngram has n-1 spaces)
# to help users understand and test the regular expression matching function, pyramid provides another application called "regex"
# users are encouraged to test their regular expression first with "regex"
train.feature.filterNgrams.regex=\\d

# whether to consider code description as features
train.feature.useCodeDescription=false
# the file containing code descriptions, each line in the file describes one code
train.feature.codeDesc.File=
# the program will use this analyzer to analyze (tokenize, stem, filter) the code descriptions
# this analyzer should be the same as the one specified in the Elasticsearch body field mapping
train.feature.codeDesc.analyzer=english
# which field we should match code descriptions against to compute matching scores
train.feature.codeDesc.matchField=body
# As most of the documents would match at least one word in the code description, direct partial matching results in dense features.
# We provide a threshold specifying the minimum percentage of the words in the code description the document must match. 
# Matching below the threshold will be discarded. 
# For example, if the description has 10 terms and a document matches 2 terms and minMatchPercentage=30, the matching score will be set to 0.
# The implementation uses minimum should match query + constance score
# see https://www.elastic.co/guide/en/elasticsearch/guide/current/ignoring-tfidf.html
# Matching k out of n words will gives a score of k^2/n^1.5 
# For boosting classifiers, we can simply interpret the score as k as monotonic transformations do no matter
train.feature.codeDesc.minMatchPercentage=20

########## labels ##############
# the elasticsearch index field for labels
train.label.field=real_labels
train.label.filterByPrefix=false
train.label.filter.prefix=foo
# encode labels in frequency or alphabetical order
train.label.order=frequency
# During training, only consider labels with document count above this (absolute) threshold; set this threshold to 0 if you want consider all labels
train.label.minDF=5
# whether to consider new test labels during evaluation; this option does not affect the actual prediction; new labels will never be predicted;
# setting this paramater to true will include new test labels into the test performance evaluation
test.considerNewLabel=true
valid.considerNewLabel=true

########### weights ############
# whether to incorporate instance weights in model training
train.useInstanceWeights=false
# the elasticsearch filed storing instance weights
train.weight.field=weights

############# training algorithm hyper parameters ##########
# What values to try for the overall elastic-net penalty 
# Big values indicate strong regularizations
# The penalty can greatly affect the performance and thus requires careful tuning
# Multiple values separated by comma can be listed, and they will be tried in turn and the best value will be used
train.penalty.candidates=0.0001,0.000001

# What values to try for L1 Ratio
# Any real number from 0 to 1, where 0 means L2 only, 1 means L1 only, and 0.5 means half L1 and half L2.
# Multiple values separated by comma can be listed, and they will be tried in turn and the best value will be used
train.l1Ratio.candidates=0.1,0.5


############ calibration #############
# isotonic or none
calibrate.labelCalibrator=isotonic
# cardinality_isotonic, reranker, or none
calibrate.setCalibrator=cardinality_isotonic
calibrate.numCandidates=400


############ report ##################
# When generating prediction reports for individual label probabilities, labels with probabilities below the threshold will not be displayed
# This only make the reports more readable; it does not affect the actual prediction in any way.
report.classProbThreshold=0.2
report.labelSetLimit=10

# the internal Java class name for this application. 
# users do not need to modify this.
pyramid.class=AppBRLR